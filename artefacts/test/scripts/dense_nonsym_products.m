%% ------------------------------------------------------------------------------------- 
%  This matlab/octave script generates test dataset for dense non-symmetric mat-vector 
%  and mat-mat multiplication kernel
%  The script is compatible with Octave 4.0+
%  Osho Ilamah.
%  -------------------------------------------------------------------------------------


%% The portion of the file initializes the workspace
addpath(pwd);
clc;
clear;
more off;

%% These are input variables
n = 10;
bin_file_format = '%s_dense_non_sym_mat_%d.mtx';
mat_file_format = '%s_mat_%d.mat';


%% make non symmetric random matrices
fprintf('Making non symmetric random matrices..\n');
A = rand(n, n);
B = rand(n, n);
C = rand(n, 1);


%% compute the matrix products
P = zeros(n, 31);
A_times_B = A*B;
At_times_B = A'*B;
A_times_Bt = A*B';
A_times_C = A*C;

P(:,1:n) = A_times_B;
P(:,(n+1):(2*n)) = At_times_B;
P(:,((2*n)+1):(3*n)) = A_times_Bt;
P(:,((3*n)+1)) = A_times_C;

%% Write to files
fprintf('write matrix A_dns\n');
comment = char('   Test non-symmetric matrix file', '   Generated by dense_nonsym_products.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'A_dns',n), A, comment);

fprintf('write matrix B_dns\n');
comment = char('   Test non-symmetric matrix file', '   Generated by dense_nonsym_products.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'B_dns',n), B, comment);

fprintf('write matrix C_dns\n');
comment = char('   Test non-symmetric matrix file', '   Generated by dense_nonsym_products.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'C_dns',n), C, comment);

fprintf('write matrix P_dns\n');
comment = char('   Test non-symmetric matrix file', '   Generated by dense_nonsym_products.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'P_dns',n), P, comment);


%fprintf('write matrix Ssym\n');
%comment = char('   Test sparse symmetric matrix file', '   Created by Osho Ilamah.');
%mmwrite(sprintf(bin_file_format,'Ssym',n), S, comment);
%
%
%fprintf('write matrix vector products Y\n');
%comment = char('   Test matrix file', '   Created by Osho Ilamah.');
%mmwrite(sprintf(bin_file_format,'Y',n), Y, comment);



%fprintf('writing to mat file too..\n');
%save(sprintf(mat_file_format,'Asym',n),'A');
%save(sprintf(mat_file_format,'Ssym',n),'S');

%%% Perform truncated eigen decomposition of the matrix, taking  k largest/smallest/etc eigenvalues
%fprintf('Performing eigen decomposition\n');
%%[eigenVects, lambda] = eigs(A, k, mode);
%[eigenVects, lambda] = eig(A);
%eigenVals = diag(lambda);
%
%%% Perform truncated svd decomposition of the matrix, taking  k largest/smallest/etc eigenvalues
%fprintf('Performing svd decomposition\n');
%%[U, S, V] = svds(A, k, opt);
%[U, S, V] = svd(A);
%singVals = diag(S);
%
%%% Save the trucated eigenpairs
%eigenValues_file = 'Asym_eigen_vals_400.mat';
%eigenVectors_file = 'Asym_eigen_vectors_400.mat';
%save(eigenValues_file,'eigenVals');
%save(eigenVectors_file,'eigenVects');