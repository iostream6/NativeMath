%% -------------------------------------------------------------------------------------------- 
%  This matlab/octave script generates test dataset for sparse symmetric mat-vector mult kernel
%  The script is compatible with Octave 4.0+
%  Osho Ilamah.
%  --------------------------------------------------------------------------------------------


%% This portion of the file initializes the workspace
addpath(pwd);
clc;
clear;
more off;

%% These are input variables
n = 100;
sparse_matrix_nnz = 800; 
bin_file_format = '%s_mat_%d.mtx';
mat_file_format = '%s_mat_%d.mat';


%% make a random symmetric matrix and write the matrix to file
fprintf('making sysmetric matrix..\n');
A = randn(n);
A=0.5*(A + A');


%% make a random sparse symmetric matrix and write the matrix to file
fprintf('making sparse sysmetric matrix..\n');
density = sparse_matrix_nnz /(n*n);
S = sprandsym(n, density);

%% make a random nx1 matrix (i.e. a vector)
v = rand(n, 1);

%% compute the products
Y = zeros(n, 3);
Y(:,1) = v;
Y(:,2) = A*v;
Y(:,3) = S*v;


%% Write to files
fprintf('write matrix Asym\n');
comment = char('   Test symmetric matrix file', '   Generated by sparse_sym_mm.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'Asym',n), A, comment);


fprintf('write matrix Ssym\n');
comment = char('   Test sparse symmetric matrix file', '   Generated by sparse_sym_mm.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'Ssym',n), S, comment);


fprintf('write matrix vector products Y\n');
comment = char('   Test matrix file', '   Generated by sparse_sym_mm.m', '   Created by Osho Ilamah.');
mmwrite(sprintf(bin_file_format,'Y',n), Y, comment);



%fprintf('writing to mat file too..\n');
%save(sprintf(mat_file_format,'Asym',n),'A');
%save(sprintf(mat_file_format,'Ssym',n),'S');

%%% Perform truncated eigen decomposition of the matrix, taking  k largest/smallest/etc eigenvalues
%fprintf('Performing eigen decomposition\n');
%%[eigenVects, lambda] = eigs(A, k, mode);
%[eigenVects, lambda] = eig(A);
%eigenVals = diag(lambda);
%
%%% Perform truncated svd decomposition of the matrix, taking  k largest/smallest/etc eigenvalues
%fprintf('Performing svd decomposition\n');
%%[U, S, V] = svds(A, k, opt);
%[U, S, V] = svd(A);
%singVals = diag(S);
%
%%% Save the trucated eigenpairs
%eigenValues_file = 'Asym_eigen_vals_400.mat';
%eigenVectors_file = 'Asym_eigen_vectors_400.mat';
%save(eigenValues_file,'eigenVals');
%save(eigenVectors_file,'eigenVects');