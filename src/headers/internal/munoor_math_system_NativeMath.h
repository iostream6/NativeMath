/*
 *  Modified, removing JNIEXPORT to use instead export lists. As otherwise non JNI functions are  hidden
 * 
 * 2017.06.03  - Introduced Java_munoor_math_system_MatrixUtils_setThreads method
 * 2017.06.15  - Introduced Java_munoor_math_system_MatrixUtils_allocateAlligned and Java_munoor_math_system_MatrixUtils_freeAlligned
 * 2017.06.25  - Added support for sparse matrix eigen decomposition
 * 2018.04.30  - Restructure and introduce SSS support. Added bulk allocate/release. Rename methods/Java class. Overall QC required
 * 
 * http://anadoxin.org/blog/control-over-symbol-exports-in-gcc.html
 * https://www.ibm.com/developerworks/aix/library/au-aix-symbol-visibility/
 * https://github.com/stack-of-tasks/jrl-doc/wiki/Symbol-visibility-management
 * http://man7.org/conf/lca2006/shared_libraries/slide18b.html
 * http://stackoverflow.com/questions/19422660/when-to-use-jniexport-and-jnicall-in-android-ndk
 * https://gcc.gnu.org/wiki/Visibility
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class munoor_math_system_NativeMath */

#ifndef _Included_munoor_math_system_NativeMath
#define _Included_munoor_math_system_NativeMath
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     munoor_math_system_NativeMath
 * Method:    sssSparseSymmetricEigs
 * Signature: (JJJJIIIIIJ)I
 */
/*JNIEXPORT*/ jint JNICALL Java_munoor_math_system_NativeMath_sssSparseSymmetricEigs
  (JNIEnv *, jclass, jlong, jlong, jlong, jlong, jint, jint, jint, jint, jint,jint, jlong);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    symmetricEigs
 * Signature: (JIIIIJ)I
 */
/*JNIEXPORT*/ jint JNICALL Java_munoor_math_system_NativeMath_symmetricEigs
  (JNIEnv *, jclass, jlong, jint, jint, jint, jint, jlong);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    releaseRegisters
 * Signature: (JI)V
 */
/*JNIEXPORT*/ void JNICALL Java_munoor_math_system_NativeMath_releaseRegisters
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    setKernelThreads
 * Signature: (I)V
 */
/*JNIEXPORT*/ void JNICALL Java_munoor_math_system_NativeMath_setKernelThreads
  (JNIEnv *, jclass, jint);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    allocateAllignedBuffer
 * Signature: (III)J
 */
/*JNIEXPORT*/ jlong JNICALL Java_munoor_math_system_NativeMath_allocateAllignedBuffer
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    allocateAllignedBuffers
 * Signature: ([I[II)[J
 */
/*JNIEXPORT*/ jlongArray JNICALL Java_munoor_math_system_NativeMath_allocateAllignedBuffers
  (JNIEnv *, jclass, jintArray, jintArray, jint);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    releaseAllignedBuffer
 * Signature: (J)V
 */
/*JNIEXPORT*/ void JNICALL Java_munoor_math_system_NativeMath_releaseAllignedBuffer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     munoor_math_system_NativeMath
 * Method:    releaseAllignedBuffers
 * Signature: ([J)V
 */
/*JNIEXPORT*/ void JNICALL Java_munoor_math_system_NativeMath_releaseAllignedBuffers
  (JNIEnv *, jclass, jlongArray);

#ifdef __cplusplus
}
#endif
#endif
